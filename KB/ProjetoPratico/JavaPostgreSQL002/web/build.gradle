plugins {
	  id 'java'
		id 'org.springframework.boot' version '3.2.0'
		id 'io.spring.dependency-management' version '1.1.4'
}

java {
  sourceCompatibility = '17'
}

jar {
    enabled = false
}

bootJar {
		duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

bootRun {
    jvmArgs(['--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED'])
}

repositories {
	mavenLocal()
	mavenCentral()

	maven {url 'https://pkgs.dev.azure.com/genexuslabs/3361ab3b-96bc-4a69-a37a-f2b255ff2f35/_packaging/snapshots/maven/v1'}
	maven {
		url 'https://repository.openmindonline.it'
		metadataSources {
			artifact()
		}
	}
}

configurations {
	reorgConfiguration
	compileClasspath.extendsFrom(basicDeps)
	compileClasspath.extendsFrom(genexusConfiguration) 
	runtimeClasspath.extendsFrom(basicDeps)
	runtimeClasspath.extendsFrom(genexusConfiguration)
	runtimeClasspath.extendsFrom(driversConfiguration)
	implementation.extendsFrom(basicDeps)

	all {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
}

ext {
	genexusVersion = project.findProperty('GENEXUS_VERSION')
	javaPlatform = project.findProperty('JAVA_PLATFORM')	
	pdfLibrary = project.findProperty('PDF_LIBRARY')
}

if (!project.hasProperty('deploy')) {
	FileTree gradleFiles = fileTree('.').include('*.gradle')
	gradleFiles.exclude '.gradle'
	gradleFiles.exclude 'build.gradle'
	gradleFiles.visit {element ->
	    println "apply $element.relativePath"
	    apply from: "$element.relativePath"
	}
}

if (project.hasProperty('deploy') && project.hasProperty('gradleFiles')) {
	String[] str;
	str = project.findProperty('gradleFiles').split(';');
	for( String values : str ) {
			println "apply " + values;
      apply from: values;
	}
}

dependencies {
  implementation ('org.springframework.boot:spring-boot-starter-web'){
  	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
  }
  
  implementation 'org.springframework.boot:spring-boot-starter-log4j2'
  
  implementation 'org.springframework.boot:spring-boot-devtools'
  
  implementation ('org.springframework.boot:spring-boot-starter-websocket') {
  	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
  }
  
  implementation ("com.genexus:gxspringboot:${genexusVersion}") {
  	exclude group: 'com.genexus', module: 'gxclassR'
  	exclude group: 'com.genexus', module: 'gxwrapperjakarta'
  }
  
	if (project.hasProperty('SQLSERVER')) {
		driversConfiguration ("com.microsoft.sqlserver:mssql-jdbc:10.2.0.jre8")
	}

	if (project.hasProperty('ORACLE')) {
		driversConfiguration ("com.oracle.database.jdbc:ojdbc6:11.2.0.4") {
			transitive = false
		}
	}	

	if (project.hasProperty('POSTGRESQL')) {
		driversConfiguration ("org.postgresql:postgresql:42.2.28")
	}

	if (project.hasProperty('MYSQL')) {
		if (project.findProperty('DBMS_MYSQL_VERSION').equals('8')) {
			driversConfiguration ("mysql:mysql-connector-java:8.0.29") {
				transitive = false
			}
		}
		else {
			driversConfiguration ("mysql:mysql-connector-java:5.1.49")
		}
	}

	if (project.hasProperty('DB2ISERIES')) {
		driversConfiguration ("net.sf.jt400:jt400:9.3")
	}

	if (project.hasProperty('DAMENG')) {
		driversConfiguration ("com.dameng:DmJdbcDriver18:8.1.2.79")
	}
	
	reorgConfiguration ("com.genexus:gxclassR:${genexusVersion}") {
		exclude group: 'com.genexus', module: 'gxcryptocommon'
		exclude group: 'com.genexus', module: 'gxmail'
		exclude group: 'jakarta.ws.rs', module: 'jakarta.ws.rs-api'
		exclude group: 'javax.transaction', module: 'jta'
		exclude group: 'com.sun.org.apache.xml.internal', module: 'resolver'
		exclude group: 'org.apache.logging.log4j', module: 'log4j-1.2-api'
		exclude group: 'com.lowagie', module: '*'
		exclude group: 'com.itextpdf', module: '*'
		exclude group: 'org.apache.pdfbox', module: 'pdfbox'
		exclude group: 'com.google.zxing', module: 'core'		
		exclude group: 'org.jsoup', module: 'jsoup'
		if (project.hasProperty('deploy')) {
			exclude group: 'com.genexus', module: 'gxcommon'
			exclude group: 'com.genexus', module: 'gxwrapperjavax'
			exclude group: 'org.glassfish.main.javaee-api', module: 'javax.jms'
			exclude group: 'com.github.spullara.mustache.java', module: 'compiler'
			exclude group: 'commons-net', module: 'commons-net'
			exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
			exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
			exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
			exclude group: 'org.owasp.encoder', module: 'encoder'
			exclude group: 'org.apache.httpcomponents', module: 'httpclient'
		}
	}

	if (project.hasProperty('deploy')) {
		reorgConfiguration ("com.genexus:gxwrappercommon:${genexusVersion}") {
			exclude group: 'com.genexus', module: 'gxcommon'
			exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
			exclude group: 'org.apache.ws.security', module: 'wss4j'
		}

		reorgConfiguration ("com.genexus:gxcommon:${genexusVersion}") {
			exclude group: 'xerces', module: 'xercesImpl'
			exclude group: 'commons-codec', module: 'commons-codec'
			exclude group: 'commons-lang', module: 'commons-lang'
			exclude group: 'org.apache.httpcomponents', module: 'httpclient'
		}		
	}	  
  
	basicDeps ("com.genexus:gxcommon:${genexusVersion}") {
		if (project.hasProperty('UseFrontEnd') && !UseFrontEnd.equalsIgnoreCase("true")) {	
			exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
		}
	}
	
	if (!project.hasProperty('deploy') || (project.hasProperty('UseFrontEnd') && UseFrontEnd.equalsIgnoreCase("true"))) {	
		implementation ("com.genexus:gxweb:${genexusVersion}") {
				exclude group: 'com.genexus', module: 'gxclassR'
		}
	}
	
	basicDeps ("com.genexus:gxclassR:${genexusVersion}") {
		exclude group: 'com.genexus', module: 'gxcommon'
		exclude group: 'com.genexus', module: 'gxwrapperjavax'
		exclude group: 'com.genexus', module: 'gxmail'
		exclude group: 'javax.transaction', module: 'jta'
		exclude group: 'com.sun.org.apache.xml.internal', module: 'resolver'
		exclude group: 'org.slf4j', module: 'slf4j-nop'
		exclude group: 'org.slf4j', module: 'slf4j-api'
		if (pdfLibrary.equals("ITEXT") || (project.hasProperty('deploy') && project.hasProperty('PDFSupport') && PDFSupport.equalsIgnoreCase("False"))) {
			exclude group: 'com.itextpdf', module: '*'
			exclude group: 'org.apache.pdfbox', module: 'pdfbox'
			exclude group: 'com.google.zxing', module: 'core'
			exclude group: 'org.jsoup', module: 'jsoup'
		}
		if (pdfLibrary.equals("ITEXT8") || (project.hasProperty('deploy') && project.hasProperty('PDFSupport') && PDFSupport.equalsIgnoreCase("False"))) {
			exclude group: 'com.lowagie', module: '*'
			exclude group: 'org.apache.pdfbox', module: 'pdfbox'
			exclude group: 'com.google.zxing', module: 'core'
			exclude group: 'org.jsoup', module: 'jsoup'
		}
		if (pdfLibrary.equals("PDFBOX") || (project.hasProperty('deploy') && project.hasProperty('PDFSupport') && PDFSupport.equalsIgnoreCase("False"))) {
			exclude group: 'com.lowagie', module: '*'
			exclude group: 'com.itextpdf', module: '*'
		}		
		if (project.hasProperty('deploy') && project.hasProperty('SoapNativeSupport') && !SoapNativeSupport.equalsIgnoreCase("true") ) {
			exclude group: 'com.sun.org.apache.xml.internal', module: 'resolver'
		}				
	}
	
	if (!project.hasProperty('deploy') || (project.hasProperty('OfficeSupport') && OfficeSupport.equalsIgnoreCase("True") )) {
		implementation ("com.genexus:gxoffice:${genexusVersion}") {
			exclude group: 'com.genexus', module: 'gxclassR'
			exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
		}
	}

	if (!project.hasProperty('deploy') || (project.hasProperty('MailSupport') && MailSupport.equalsIgnoreCase("True") )) {
		implementation ("com.genexus:gxmail:${genexusVersion}"){
			exclude group: 'com.genexus', module: 'gxcommon'
		}
	}
	
	if (!project.hasProperty('deploy') || (project.hasProperty('GeographySupport') && GeographySupport.equalsIgnoreCase("True") )) {
		implementation ("com.genexus:gxgeospatial:${genexusVersion}") {
			exclude group: 'com.genexus', module: 'gxclassR'
		}
	}
	
	if (!project.hasProperty('deploy') || (project.hasProperty('SearchableSupport') && SearchableSupport.equalsIgnoreCase("True") )) {	
		implementation ("com.genexus:gxsearch:${genexusVersion}") {
			exclude group: 'com.genexus', module: 'gxclassR'
			exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
		}
	}
	
	if (!project.hasProperty('deploy') || (project.hasProperty('GRPCSupport') && GRPCSupport.equalsIgnoreCase("True") )) {	
		implementation (group: 'io.grpc', name: 'grpc-all', version: '1.49.0') {
			exclude group: 'io.grpc', module: 'grpc-netty-shaded'
			exclude group: 'io.grpc', module: 'grpc-rls'
			exclude group: 'io.grpc', module: 'grpc-testing'
			exclude group: 'com.google.auth', module: 'google-auth-library-credentials'
			exclude group: 'com.google.auth', module: 'google-auth-library-oauth2-http'
			exclude group: 'org.codehaus.mojo', module: 'animal-sniffer-annotations'
			exclude group: 'org.conscrypt', module: 'conscrypt-openjdk-uber'
		}
	}
	
	implementation fileTree("lib") {
		include '*.jar'
	}

	implementation fileTree("drivers") {
		include '*.jar'
	}

	implementation fileTree("modules") {
		include '*.jar'
	}

	implementation fileTree("datasources") {
		include '*.jar'
	}

	implementation fileTree("services") {
		include '*.jar'
	}
	
	implementation fileTree("GAMLibraries") {
		include '*.jar'
		exclude 'slf4j-simple-1.7.10.jar'
		exclude 'slf4j-api-1.7.5.jar'
	}
	
	implementation fileTree("GAM_Backend/WEB-INF/lib") {
		include '*.jar'
		exclude 'slf4j-simple-1.7.10.jar'
		exclude 'slf4j-api-1.7.5.jar'
	}	
	
	implementation fileTree(".") {
		include 'QueryViewerServices*.jar'
		include 'ExternalObjects.jar'
	}	
	
	basicDeps ("com.genexus:gxwrappercommon:${genexusVersion}") {
		exclude group: 'com.genexus', module: 'gxcommon'
		if (project.hasProperty('deploy') && project.hasProperty('SoapNativeSupport') && !SoapNativeSupport.equalsIgnoreCase("true") ) {
			exclude group: 'org.apache.wss4j', module: 'wss4j-ws-security-dom'
			exclude group: 'org.apache.wss4j', module: 'wss4j-ws-security-common'
		}
	}
	
	basicDeps ("com.genexus:gxwrapperjakarta:${genexusVersion}") {
		exclude group: 'com.genexus', module: 'gxwrappercommon'
		exclude group: 'joda-time', module: 'joda-time'
		exclude group: 'jakarta.servlet', module: 'jakarta.servlet-api'
		exclude group: 'org.glassfish.jersey.media', module: 'jersey-media-json-jackson'
		exclude group: 'org.glassfish.jersey.containers', module: 'jersey-container-servlet-core'
		exclude group: 'org.glassfish.jersey.inject', module: 'jersey-hk2'
		if (project.hasProperty('deploy') && project.hasProperty('RestSupport') && !RestSupport.equalsIgnoreCase("true") ) {
			exclude group: 'com.fasterxml.jackson.jakarta.rs', module: 'jackson-jakarta-rs-json-provider'
			exclude group: 'com.fasterxml.jackson.jakarta.rs', module: 'jackson-jakarta-rs-base'
			exclude group: 'com.fasterxml.jackson.module', module: 'jackson-module-jakarta-xmlbind-annotations'
		}		
		if (project.hasProperty('deploy') && project.hasProperty('SoapNativeSupport') && !SoapNativeSupport.equalsIgnoreCase("true") ) {
			exclude group: 'com.sun.xml.ws', module: 'jaxws-rt'
		}
		if (project.hasProperty('deploy') && project.hasProperty('RestSupport') && !RestSupport.equalsIgnoreCase("true") && project.hasProperty('SoapNativeSupport') && !SoapNativeSupport.equalsIgnoreCase("true")) {
			exclude group: 'jakarta.xml.ws', module: 'jakarta.xml.ws-api'
		}
		if (project.hasProperty('deploy')) {
			exclude group: 'jakarta.servlet', module: 'jakarta.servlet-api'
		}		
	}				

}

task copyGAMConfigurationFiles(type: Copy) {
	from ('.') {
		include 'application.gam'
		include 'connection.gam'
	}
	
	into 'src\\main\\resources'
	
	eachFile {
    def targetFile = new File(destinationDir, path)
    if (file.lastModified() < targetFile.lastModified()) {
        exclude()
    }
	}	
}	

task copyRootResources(type: Copy) {
	into 'src\\main\\resources'
	
	from ('.') {
		include 'application.properties'
		include 'application.key'
		include 'CloudServices.config'
		include 'GXCF_Chatbots.config'
		include 'rewrite.config'
		include '*.services'
		include 'PDFReport.template'
		include 'gxusercontrols/**/*'
		include 'private/**/*'
		include 'gxmetadata/**/*'
		include 'Metadata/TableAccess/**/*'		
		include 'themes/**/*'
		include 'sun-jaxws.xml' 
	}
	
	from ('GAM_Backend') {
		include 'themes/**/*' 
	}
	
	from ('GAM_Backend/WEB-INF') {
		include 'private/**/*'
		include 'gxusercontrols/**/*'
	}		
	
	eachFile {
    def targetFile = new File(destinationDir, path)
    if (file.lastModified() < targetFile.lastModified()) {
        exclude()
    }
	}
}

task copyFilterFolder(type: Copy) {
    // Define the source folder
    from 'filter'

    // Define the destination folder
    into 'src\\main\\java\\com\\projetopratico\\filter'

    // Ensure the destination folder exists
    doFirst {
        def destinationDir = file('src\\main\\java\\com\\projetopratico\\filter')
        if (!destinationDir.exists()) {
            destinationDir.mkdirs()
        }
    }
}

// Add after copyFilterFolder task definition
tasks.compileJava.dependsOn copyFilterFolder

// Optionally, to ensure strict ordering
tasks.compileJava.mustRunAfter copyFilterFolder

task copyStatic(type: Copy) {
	from ('.') {
		include 'bootstrap/**/*'
		include 'devmenu/**/*'
		include '*Resources/**/*'
		include 'UserControls/**/*'
		include 'Help/**/*.htm'
		include	'*manifest.json'
		include '*service-worker.js'
		include '*.yaml'
		include 'developermenu.html'
		include 'DeveloperMenu.xml'
		include 'prgs.xsl'
	}
	from ('../../CSSLibraries') {
		include '**/*'
	}
	from ('staticContent') {
		exclude '**/*.html'
	}	
	from ('js') {
		include '**/*.js'
		exclude '**/*.src.js'
	}		
	from ('UCSupportFiles') {
		include '**/*.*'
		exclude '*.VER'
	}
	from ('GAM_Backend/static') {
		include '**/*'
	}	
	from ('./static') {
		include '**/*'
	}
	into 'src\\main\\resources\\static'
	
	eachFile {
    def targetFile = new File(destinationDir, path)
    if (file.lastModified() < targetFile.lastModified()) {
        exclude()
    }
	}	
}

// Define the copyAdditionalFiles task
task copyAdditionalFiles(type: Copy) {
    dependsOn tasks.copyRootResources
	dependsOn tasks.copyStatic
    dependsOn tasks.copyFilterFolder
    dependsOn tasks.copyGAMConfigurationFiles
    from('.') {
        include 'log4j2.xml'
        include 'gx_handler_chain_jakarta.xml'
        include 'qviewer/**/*'
    }
    from('src\\main\\java') {
        include '**\\*.cfg'
        include '**\\Images.txt'
        include '**\\messages*.txt'
    }
    from('GAM_Backend/WEB-INF/classes') {
        include '**/*'
    }    
    into project.sourceSets.main.java.destinationDirectory
    rename 'gx_handler_chain_jakarta.xml', 'gx_handler_chain.xml'

    eachFile {
        def targetFile = new File(destinationDir, path)
        if (file.lastModified() < targetFile.lastModified()) {
            exclude()
        }
    }    
}

task cleanSources(type: Delete) {
	delete 'src\\main\\java'
}

task getDeps(type: Copy) {
	duplicatesStrategy = 'include'
	from configurations.genexusConfiguration
	from configurations.runtimeClasspath
	from configurations.driversConfiguration
	into 'dependencies/'
}

task getReorgDeps(type: Copy) {
	from configurations.reorgConfiguration
	from configurations.driversConfiguration
	from('lib') {
		include '*.jar'
	}	
	if (project.hasProperty('GAM_MODEL_PATH')) {
		into project.findProperty('GAM_MODEL_PATH') + '/lib/'
	}
	else {
		into 'dependencies/'
	}
}

task cleanDeps(type: Delete) {
	if (project.hasProperty('GAM_MODEL_PATH')) {
		delete project.findProperty('GAM_MODEL_PATH') + '/lib/'
	}
	else {
		delete 'dependencies'
	}
}

processResources.dependsOn copyAdditionalFiles
clean.finalizedBy cleanSources
